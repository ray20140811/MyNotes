* Git

** [[https://backlog.com/git-tutorial/tw/][連猴子都能懂的Git入門指南]]

*** Git的基本介紹

*** 教學1 開始使用Git

**** 初始設定

Git的設定會被記錄在用戶的目錄首頁下的.gitconfig檔案裡。

#+begin_src
 $ git config --global user.name "<使用者名字>"

 $ git config --global user.email "<電子信箱>"
 #+end_src

可以為Git的命令設定別名，例如：「checkout」可以省略為「co」來執行。

#+begin_src
 $ git config --global alias.co checkout
 #+end_src

在Windows使用主控台（Git Bash）的話，含有中文的檔名會顯示為 "\346\226\260\350\246..."添加以下的設定，讓含有中文的檔名可以正確顯示。

#+begin_src
 $ git config --global core.quotepath off
 #+end_src

在提交訊息時要使用中文的話，不要使用 -m 參數，要用外部編輯器來輸入

#+begin_src
git config --global core.editor "emacs"
#+end_src

**** 新建數據庫

在本地端建立新的數據庫。建立一個名稱為「tutorial」的空目錄，把它放在Git的管理之下。

#+begin_src
$ mkdir tutorial

$ cd tutorial

$ git init
Initialized empty Git repository in /Users/yourname/Desktop/tutorial/.git/
#+end_src

**** 提交檔案

首先在tutorial目錄裡新添一個名為「sample.txt」的文字檔案。請在檔案裡輸入以下的內容：

*連猴子都懂的Git命令*

#+begin_src
$ echo "連猴子都懂的Git命令" > sample.txt
#+end_src

在Git管理之下的目錄，可以使用status命令確認工作目錄與索引的狀態喔。

#+begin_src
$ git status
#+end_src

執行status命令確認tutorial目錄的狀態。

#+begin_src
$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#     sample.txt
nothing added to commit but untracked files present (use "git add" to track)
#+end_src

要將檔案加入到索引，可以使用add <file>命令。<file>是指向要加入索引的檔案。若要指向多個檔案，可用空白鍵將檔案們分開。

#+begin_src
$ git add sample.txt
$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#     new file:   sample.txt
#
#+end_src

#+begin_src
$ git commit -m "first commit"
[master (root-commit) 116a286] first commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 sample.txt

$ git status
# On branch master
nothing to commit (working directory clean)
#+end_src

#+begin_src
$ git log
commit ac56e474afbbe1eab9ebce5b3ab48ac4c73ad60e
Author: eguchi <eguchi@nulab.co.jp>
Date:   Thu Jul 12 18:00:21 2012 +0900

    first commit
#+end_src

安裝git的同時也會安裝gitk工具。可以用圖形化介面確認歷史提交記錄。

#+begin_src
$ gitk
#+end_src


*** 共享數據庫

**** Push到遠端數據庫

***** Push(推送)

為了將本地端數據庫的修改歷史共享到遠程數據庫，必須上​​傳本地端數據庫中儲存的修改歷史。

為此，需要在Git執行Push(推送)操作。執行Push之後，本地端的修改歷史會被上傳到遠端數據庫。遠端數據庫的修改歷史就會和本地端數據庫的修改歷史保持同步。


***** Clone(複製)

要下載遠端數據庫需要進行複製（Clone）的操作。

執行複製後，可以把遠端數據庫裡的內容全部下載下來，之後您可以在另一台機器的本地數據庫上進行操作。


***** Pull(拉取)

欲同步遠端數據庫以更新本地端數據庫，請使用Pull(拉取)。

執行pull之後，會從遠端數據庫下載最新的修改歷史，將其同步到自己的本地端數據庫。


*** 教學2 共享數據庫

**** 建立遠端數據庫

#+begin_src
$ mkdir tutorial-bare

$ cd tutorial-bare

$ git --bare init
#+end_src


**** Push到遠端數據庫

#+begin_src
$ git remote add <name> <url>
#+end_src

#+begin_src
$ git remote add origin https://[your_space_id].backlog.jp/git/[your_project_key]/tutorial.git
#+end_src

#+begin_src
$ git push <repository> <refspec>...
#+end_src

#+begin_src
$ git push -u origin master
Username: <用戶名>
Password: <密碼>
Counting objects: 3, done.
Writing objects: 100% (3/3), 245 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://nulab.backlog.jp/git/BLG/tutorial.git
 * [new branch]      master -> master
#+end_src


**** 複製遠端數據庫

#+begin_src
$ cd ..

$ git clone tutorial-bare tutorial

$ cd tutorial
#+end_src

#+begin_src
$ cd ..

$ git clone tutorial-bare tutorial2

$ cd tutorial2
#+end_src


若要確認是否作業成功，請到複製的「tutorial2」目錄裡，查看sample.txt有沒有包含以下內容：

#+begin_src
連猴子都懂的Git命令
#+end_src


**** 在複製的本地端數據庫執行Push

*tutorial2的操作*

首先，在上一頁複製（Clone）數據庫目錄裡的sample.txt，增加以下粗體字的部分後再提交。

#+begin_src
連猴子都懂的Git命令
*add 修改加入書籤*
#+end_src

#+begin_src
$ git add sample.txt
$ git commit -m "添加add的說明"
[master 1ef5c8c] 添加add的說明
 1 files changed, 1 insertions(+), 1 deletions(-)
#+end_src

*tutorial2的操作*

接下來，push這次的修改到遠端數據庫。

在複製的數據庫裡執行push命令時，您可以省略數據庫和分支的名稱。

#+begin_src
$ git push
Username: <用戶名>
Password: <密碼>
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 351 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://nulab.backlog.jp/git/BLG/tutorial.git
   486789c..1ef5c8c  master -> master
#+end_src

請打開貝格樂的Git頁面。您可以看到push內容已被添加到「最近的更新」了。


**** 從遠端數據庫執行Pull

*在tutorial的操作*

請執行以下的命令。

#+begin_src
$ git pull origin master
Username: <用戶名>
Password: <密碼>
From https://nulab.backlog.jp/git/BLG/tutorial
 * branch            master     -> FETCH_HEAD
Updating ac56e47..3da09c1
Fast-forward
 sample.txt |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
#+end_src

已經更新sample.txt檔案的內容。

*在tutorial的操作*

使用log命令確認歷史記錄。

#+begin_src
$ git log
commit 3da09c1134a41f2bee854a413916e4ebcae7318d
Author: eguchi <eguchi@nulab.co.jp>
Date:   Thu Jul 12 18:02:45 2012 +0900

    添加add的說明

commit ac56e474afbbe1eab9ebce5b3ab48ac4c73ad60e
Author: eguchi <eguchi@nulab.co.jp>
Date:   Thu Jul 12 18:00:21 2012 +0900

    first commit
#+end_src

在「tutorial2」新添加的提交現在已被列表在這個數據庫的歷史記錄上。

*在tutorial的操作*

打開sample.txt檔案確認內容。

#+begin_src
連猴子都懂的Git命令
add 修改加入書籤
#+end_src

我們可以看到內容已添加至「add ：修改加入索引」中。

*** 合併修改記錄

**** 合併修改記錄

您上次的push到執行下一次的push的期間，如果有其他人push更新了遠端數據庫，而您沒有更新您的本地端數據庫，那麼您的push會被拒絕。

這個時候，需要進行合併操作導入其他人的修改歷史，不然push都會被拒絕喔。若沒有合併直接覆蓋歷史記錄的話，其他人push的修改內容（如圖提交C）會消失。


**** 解決衝突

上一頁已經講解過了，Git執行合併會自動合併修改的部分，但也有不能自動合併的時候。

如果遠端數據庫和本地端數據庫的同一個地方都發生了修改的情況下（例：檔案中同一行的地方）。
這時，因為Git不能自動判斷要導入那一個修改內容於是就會發生錯誤。

發生衝突的地方，Git會修改檔案的內容如下圖顯示。所以衝突的地方需要手動修改喔。

發生衝突的案例

如下圖所示，修改好所有衝突的地方之後，執行提交會提交衝突的合併訊息的提交內容。


*** 教學3 合併修改記錄

**** 製造衝突

*在tutorial的操作*

首先在打開tutorial目錄的sample.txt，修改成以下的內容再提交。

#+begin_src
連猴子都懂的Git命令
add 修改加入索引
*commit 記錄索引的狀態*
#+end_src

#+begin_src
$ git add sample.txt
$ git commit -m "添加commit的說明"
[master 95f15c9] 添加commit的說明
 1 files changed, 1 insertions(+), 0 deletions(-)
#+end_src

*在tutorial2的操作*

接著打開tutorial2目錄的sample.txt，修改成以下的內容再提交。

#+begin_src
連猴子都懂的Git命令
add 修改加入索引
*pull 取得遠端數據庫的內容*
#+end_src

#+begin_src
$ git add sample.txt
$ git commit -m "添加pull的說明"
[master 4c01823] 添加pull的說明
 1 files changed, 1 insertions(+), 0 deletions(-)
#+end_src

*在tutorial2的操作*

直接從tutorial2 push內容到遠端數據庫。

#+begin_src
$ git push
Username: <用戶名>
Password: <密碼>
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 391 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://nulab.backlog.jp/git/BLG/tutorial.git
   3da09c1..4c01823  master -> master
#+end_src

現在，遠端數據庫的第三行即為「pull 取得遠端數據庫的內容」啦。

*在tutorial的操作*

接下來，從tutorial push提交到遠端數據庫。

#+begin_src
$ git push
Username: <用戶名>
Password: <密碼>
To https://nulab.backlog.jp/git/BLG/tutorial.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'https://nulab.backlog.jp/git/BLG/tutorial.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
#+end_src

看到吧，發生錯誤了，push被拒絕(rejected)了。

**** 解決衝突

*在tutorial的操作*

執行以下的命令。

#+begin_src
$ git pull origin master
Username: <用戶名>
Password: <密碼>
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://nulab.backlog.jp/git/BLG/tutorial
 * branch            master     -> FETCH_HEAD
Auto-merging sample.txt
CONFLICT (content): Merge conflict in sample.txt
Automatic merge failed; fix conflicts and then commit the result.
#+end_src

接著，系統會出現合併時發生衝突的警告訊息。

*在tutorial的操作*

打開sample.txt檔案確認內容，Git將用標示行顯示內容發生衝突的地方，如下圖：

#+begin_src
連猴子都懂的Git命令
add 修改加入索引
*<<<<<<< HEAD*
*commit 記錄索引的狀態*
*=======*
*pull 取得遠端數據庫的內容*
*>>>>>>> 4c0182374230cd6eaa93b30049ef2386264fe12a*
#+end_src

*在tutorial的操作*

將衝突的地方進行修改，導入兩方的修改，刪除多餘的標示行。請參考下圖：

#+begin_src
連猴子都懂的Git命令
add 修改加入索引
*commit 記錄索引的狀態*
*pull 取得遠端數據庫的內容*
#+end_src

*在tutorial的操作*

當修改完內容，解決了檔案的衝突，則需要執行提交。

#+begin_src
$ git add sample.txt
$ git commit -m "合併"
[master d845b81] 合併
#+end_src

這樣就完成了從遠端數據庫導入最新的修改內容了。

*在tutorial的操作*

我們可以使用log命令來確認數據庫的修改歷史。若加入 --graph 參數可以圖表方式顯示分支歷史。加入--oneline 簡化輸出訊息，以簡潔方式呈現。

#+begin_src
$ git log --graph --oneline
*   d845b81 合併
| \
| * 4c01823 添加pull的說明
|
* | 95f15c9 添加commit的說明
|/
* 3da09c1 添加add的說明
* ac56e47 first commit
#+end_src

這表示兩個修改歷史已經成功合併且建立了新的合併提交。

我們現在可以放心地push變更到遠端數據庫，不用擔心會產生任何衝突。

** 為你自己學 Git

*** 使用者設定

#+BEGIN_SRC bash

$ git config --global user.name "Eddie Kao"

$ git config --global user.email "eddie@5xruby.tw"

$ git config --list
user.name=Eddie Kao
user.email=eddie@5xruby.tw
#+END_SRC

*** 設定檔的位置
檔案: ~/.gitconfig

*** 【狀況題】可以每個專案設定不同的作者嗎?

#+BEGIN_SRC bash

$ git config --local user.name Sherly

$ git config --local user.email sherly@5xruby.tw

#+END_SRC

*** 更換編輯器
#+BEGIN_SRC bash

$ git config --global core.editor emacs

#+END_SRC

*** Git 裡設定一些「縮寫」

#+BEGIN_SRC bash

$ git config --global alias.co checkout

$ git config --global alias.br branch

$ git config --global alias.st status

#+END_SRC

可以再加一些參數進去 ex: git log --oneline --graph
#+BEGIN_SRC bash

$ git config --global alias.l "log --oneline --graph"

$ git config --global alias.ls 'log --graph --pretty=format:"%h <%an> %ar %s"'

$ git log --oneline --graph

$ git log --graph --pretty=format:"%h <%an> %ar %s"

#+END_SRC

*** 新增、初始 Repository

#+BEGIN_SRC bash

$ mkdir git-practice# 建立 git-practice 目錄

$ cd git-practice# 切換至 git-practice 目錄

$ git init# 初始化這個目錄,讓 Git 對這個目錄開始進行版控
Initialized empty Git repository in /private/tmp/git-practice/.git/

#+END_SRC

#+BEGIN_SRC bash

$ git status
On branch master
Initial commit
nothing to commit (create/copy files and use "git add" to track)

#+END_SRC

#+BEGIN_SRC bash

$ echo "hello, git" > welcome.html

$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	welcome.html

nothing added to commit but untracked files present (use "git add" to track)

#+END_SRC

一次只加一個檔案

#+BEGIN_SRC bash

$ git add welcome.html

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   welcome.html

#+END_SRC

可以使用萬用字元,可把所有附檔名是 html 的檔案全部都加到暫存區。

#+BEGIN_SRC bash

$ git add *.html

#+END_SRC

如果想要一口氣把全部的檔案加到暫存區,可直接使用 --all 參數:

#+BEGIN_SRC bash

$ git add --all

#+END_SRC

*** 【狀況題】如果在git add之後又修改了那個檔案的內容?

1. 你新增了一個檔案叫做 abc.txt 。
2. 然後,執行 git add abc.txt 把檔案加至暫存區。
3. 接著編輯 abc.txt 檔案。

#+BEGIN_SRC bash

$ git status
On branch master
Changes to be committed:
	(use "git reset HEAD <file>..." to unstage)

		new file:	abc.txt

Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)

		modified:	abc.txt

#+END_SRC

*** 【冷知識】"--all" 跟 "." 參數有什麼不一樣?
1. Git 版本
在 git 1.x版的時候

| 使用參數 | 新增檔案 | 修改檔案 | 刪除檔案 |
| --all    | O        | O        | O        |
| .        | O        | O        | X        |

在 git 2.x版的時候

| 使用參數 | 新增檔案 | 修改檔案 | 刪除檔案 |
| --all    | O        | O        | O        |
| .        | O        | O        | O        |

2. 執行指令時候的目錄位置
git add . 這個指令會把目前當下這個目錄,以及它的子目錄、子子目錄、子子子目
錄...裡的異動全部加到暫存區,但在這個目錄的以外的就不歸它管了。

git add --all 指令
就沒這個問題,這個指令不管在專案的哪一層目錄執行,效果都是一樣的,在這個專案裡所有
的異動都會被加至暫存區。

答案會跟所使用的 Git 版本不同以及執行指令時的目錄而有所差異。

*** 把暫存區的內容提交到倉庫裡存檔

#+BEGIN_SRC bash

$ git commit -m "init commit"
[master (root-commit) dfccf0c] init commit
 1 file changed, 1 insertion(+)
 create mode 100644 welcome.html

#+END_SRC

*** 【冷知識】一定要有東⻄才能 Commit 嗎?

只要加上 --allow-empty 參數,沒東⻄也是可以 Commit 的:

#+BEGIN_SRC bash

$ git commit --allow-empty -m "空的"
[master 76a5b84] 空的

$ git commit --allow-empty -m "空的"
[master f4f568c] 空的

$ git commit --allow-empty -m "空的"
[master 7653117] 空的

#+END_SRC

*** 工作區、暫存區與儲存庫

1. git add 指令把檔案從工作目錄移至暫存區(或索引)。
2. git commit 指令把暫存區的內容移至儲存庫。

**** 一定要二段式嗎?

#+BEGIN_SRC bash

$ git commit -a -m "update content"

#+END_SRC

*** 檢視紀錄

#+BEGIN_SRC bash

$ git log
commit 82603ed32d877a1cc1c022ed48d2c69b2bc892cd (HEAD -> master)
Author: Ray Kuo <ray20140811@gmail.com>
Date:   Sat Sep 17 01:38:26 2022 +0800

    create index page

commit 36f407ffdf5d63a3b5cdd36d92c3e665033b1aa4
Author: Ray Kuo <ray20140811@gmail.com>
Date:   Fri Sep 16 16:58:21 2022 +0800

    init commit

#+END_SRC

*** git log參數
#+BEGIN_SRC bash

$ git log --oneline --graph
\* 82603ed (HEAD -> master) create index page
\* 36f407f init commit

#+END_SRC

*** 【狀況題】我想要找某個人或某些人的 Commit...

**** 找一位叫做 Sherly 的作者的 Commit

#+BEGIN_SRC bash

$ git log --oneline --author="Sherly"
930feb3 add pig
51d54ff add lion and tiger

#+END_SRC

**** 可以用|來查詢兩個人的紀錄

#+BEGIN_SRC bash

$ git log --oneline --author="Sherly\|Eddie"

#+END_SRC

*** 【狀況題】我想要找 Commit 訊息裡面有在罵髒話的

#+BEGIN_SRC bash

$ git log --oneline --grep="WTF"

#+END_SRC

#+BEGIN_SRC bash
#+END_SRC


** 你知道的 Git 和我知道的是同一件事嗎？
   https://www.youtube.com/watch?v=j72-2ktvZV4


** 你知道 Git 是怎麼一回事嗎
   https://www.youtube.com/watch?v=LgTf7m5B0xA
   - git add . 和 git add --all 這兩個指令有什麽不一樣？

   在 git 1.x版的時候
   | 使用參數 | 新增檔案 | 修改檔案 | 刪除檔案 |
   | -------  | -------  | -------  | ------   |
   | --all    | O        | O        | O        |
   | .        | O        | O        | X        |

   在 git 2.x版的時候
   | 使用參數 | 新增檔案 | 修改檔案 | 刪除檔案 |
   | -------- | -------- | -------- | -------- |
   | --all    | O        | O        | O        |
   | .        | O        | O        | O        |

   git add --all指令不管在專案的哪一層目錄執行都有效果


#+BEGIN_SRC bash
#+END_SRC

#+BEGIN_SRC bash
#+END_SRC


* Emacs

** Basic Command

| Key Binding   | Command                    | Description       |
|---------------+----------------------------+-------------------|
| F10           | menu-bar-open              |                   |
|               | windmove-swap-states-up    | 上下視窗交換      |
|               | windmove-swap-states-down  | 上下視窗交換      |
|               | windmove-swap-states-right | 左右視窗交換      |
|               | windmove-swap-states-left  | 左右視窗交換      |
| C-x C-p       | mark-page                  |                   |
| C-x h         | mark-whole-buffer          | 全選              |
| M-g g         | goto-line                  | 跳到指定行號      |
| S-<UP>/<Down> | org-shiftup                | 單格移動          |
| M-<UP>/<Down> | org-metaup                 | 單行移動          |
| M-d           | kill-word                  | delete one word   |
| C-w           | kill-region                | delete one line   |
| C-k           | kill-line                  | delete one line   |
| M-w           | easy-kill                  | copy              |
| C-y           | yank                       | paste             |
| M-%           | query-replace              | query and replace |
| M-<           | beginning-of-buffer        |                   |
| M->           | end-of-buffer              |                   |
| C-x <SPC>     | rectangle-mark-mode        | 垂直選取          |
| C-@           | set-mark-command           |                   |
| C-x r-t       | string-rectangle           |                   |
| C-(           | kmacro-start-macro         |                   |
| C-)           | kmacro-end-macro           |                   |
| C-x u         | undo                       |                   |
| C-f C-/       | redo                       |                   |

** [[https://orgmode.org][Org Mode]]

| Key Binding | Command                  | Description                       |
|-------------+--------------------------+-----------------------------------|
| C-c C-t     | org-todo                 | change the TODO state of an item. |
| C-c C-s     | org-schedule             | Insert the SCHEDULED.             |
| C-c C-d     | org-deadline             | Insert the DEADLINE               |
| C-c [       | org-agenda-file-to-front |                                   |
|             | org-agenda               |                                   |
| C-c C-e     | org-export               |                                   |

*** [[https://emacs.stackexchange.com/questions/4279/exporting-from-org-mode-to-markdown][Exporting from org-mode to markdown]]

You should customize *org-export-backends* and enable the markdown backend.

*M-x customize-option* and then *org-export-backends* and then arrow down to the checkbox to the left of 'md' and press enter to enable it (or just click on it, if running emacs graphically). Then arrow back up and over to 'Apply and Save' (or click on it).

After customizing, run *M-x org-md-export-to-markdown*. Now you should have a new markdown file in the same directory which is an export of the original org mode file.

** [[https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html][Org-mode 简明手册]]


* Memo

#+begin_src
#+end_src
