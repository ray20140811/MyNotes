閱讀他人的程式碼(1)─讀懂程式碼，使心法皆為我所用

程式碼是別人寫的，只有原作者才真的了解程式碼的用途及涵義。許多程式人心裡都有一種不自覺的恐懼
感，深怕被迫去碰觸其他人所寫的程式碼。但是，與其抗拒接收別人的程式碼，不如徹底了解相關的語言和
慣例，當成是培養自我實力的基石。

文/iThome | 2008-04-03發表 

對大多數的程式人來說，撰寫程式碼或許是令人開心的一件事情，但我相信，有更多人視閱讀他人所寫成的
程式碼為畏途。許多人寧可自己重新寫過一遍程式碼，也不願意接收別人的程式碼，進而修正錯誤、維護它
們、甚至加強功能。

這其中的關鍵究竟在何處呢？若是一語道破，其實也很簡單，程式碼是別人寫的，只有原作者才真的了解程
式碼的用途及涵義。許多程式人心裡都有一種不自覺的恐懼感，深怕被迫去碰觸其他人所寫的程式碼。這是
來自於人類內心深處對於陌生事物的原始恐懼。

讀懂別人寫的程式碼，讓你收穫滿滿
不過，基於許多現實的原因，程式人時常受迫要去接收別人的程式碼。例如，同事離職了，必須接手他遺留
下來的工作；也有可能你是剛進部門的菜鳥，而同事經驗值夠了、升級了，風水輪流轉，一代菜鳥換菜鳥。
甚至，你的公司所承接的專案，必須接手或是整合客戶前一個廠商所遺留下來的系統，你們手上只有那套系
統的原始碼（運氣好時，還有數量不等的文件）。

諸如此類的故事，其實時常在程式人身邊或身上持續上演著。許多程式人都將接手他人的程式碼，當做一件
悲慘的事情。每個人都不想接手別人所撰寫的程式碼，因為不想花時間去探索，寧可將生產力花在產生新的
程式碼，而不是耗費在了解這些程式碼上。

很遺憾的是，上述的情況對程式人來說很難避免。我們總是必須碰觸到其他人所寫成的程式碼，甚至必須了
解它、加以修改。對於這項需求，在現今開放原始碼的風氣如此盛行的今日，正如之前的「程式設計2.0」
文中所提到的，你可以透過開放原始碼學習到新的技術、學習到高手的架構設計，大幅提高學習的效率及效
果。你甚至可以直接自開放原始碼專案中抽取、提煉出自己所需的程式碼，站在巨人的肩膀上，直接由彼端
獲得所需的生產力。從這個觀點來看，讀懂別人所寫的程式碼，就不再只是從負面觀點的「被迫接收」，而
是極具正面價值的「汲取養份」。

先了解系統架構與行為模式，再細讀
倘若撰寫程式碼是程式人的重要技藝之一，那麼讀懂別人的程式碼、接著加以修改，也勢必是另一個重要的
技藝。

如果你不能熟悉這項工作，不僅在遭逢你所不願面對的局面時，無法解決眼前接手他人程式碼的難題，更重
要的是，當你看著眼前現成的程式碼，卻不知如何從中擷取自己所需，導致最後只能入寶山空手回，望之興
嘆。

接觸他人的程式碼，大致上可以分為三種程度：一、了解，二、修改、擴充，三、抽取、提煉。

了解別人的程式碼是最基礎的工作，倘若不能了解自己要處理的程式碼，就甭論修改或擴充，更不可能去蕪
存菁，從中萃取出自己所需，回收再利用別人所撰寫的程式碼。

雖說是「閱讀」，但程式碼並不像文章或小說一樣，透過這種做法，便能夠獲得一定程度的了解。閱讀文章
或小說時，幾乎都是循序地閱讀，你只消翻開第一頁，一行行閱讀下去即可。但是，有許多程式人在試著閱
讀其他人的程式碼時，卻往往有不知如何讀起的困難。

或許找到系統的第一頁（也就是程式碼執行的啟始點）並不難，但是複雜度高的系統，有時十分龐大，有時
千頭萬緒。

從程式碼的啟始點開始讀起，一來要循序讀完所有的程式碼曠日費時，二來透過這種方式來了解系統，很難
在腦中構建出系統的面貌，進而了解到系統真正的行為。所以，閱讀程式碼的重點，不在於讀完每一行程式
碼，而是在於有效率地透過探索及閱讀，從而了解系統的架構及行為模式。以便在你需要了解任何片段的細
節實作時，能夠很快在腦上對映到具體的程式碼位置，直到那一刻，才是細讀的時機。

熟悉溝通語言與慣例用語
不論如何，有些基本的準備，是閱讀他人程式碼時必須要有的。

首先，你最好得了解程式碼寫成的程式語言。想要讀懂法文寫成的小說，總不能連法文都不懂吧。有些情況
則很特殊。我們雖然不懂該程式碼撰寫所用的語言，但是因為現代語言的高階化，而且流行的程式語言多半
都是血統相近，所以即使不那麼熟悉，有時也可勉力為之。

除了認識所用語言之外，再來就是要先確認程式碼所用的命名慣例（naming convention）。了解命名慣
例很重要，不同的程式人或開發團隊，差異可能很大。

這命名慣例涵蓋的範圍通常包括了變數的名稱、函式的名稱、類別（如果是物件導向的話）的名稱、原始碼
檔案、甚至是專案建構目錄的名稱。倘若使用了像設計模式之類的方法，這些名稱更有一些具體的表述方
式。

命名慣例有點像是程式人在程式語言之上，另行建構的一組溝通行話。程式人會透過共通約束、遵守的命名
慣例，來表達一些較高階的概念。例如，有名的匈牙利式命名法，便將變數名稱以屬性、型別、說明合併在
一起描述。對程式人來說，這種方式能夠提供更豐富的資訊，以了解該變數的作用及性質。

對程式碼閱讀來說，熟悉這個做法之所以重要，是因為當你了解整個系統所採用的慣例時，你便能試著以他
們所共同操用的語彙來進行理解。倘若，不能了解其所用的慣例，那麼這些額外提供的資訊，就無法為你所
用。像以設計模式寫成的程式碼，同樣處處充滿著模式的名稱，諸如：Factory、Facade、Proxy等等。以
這些名稱指涉的類別，也直接透過名稱，表達了它們自身的作用。對於懂得這命名慣例的讀者來說，不需要
深入探索，也能很快捕捉到這些類別的意義。

當你拿到一套必須閱讀的程式碼時，最好先取得命名慣例的說明文件。然而，並不是每套程式碼都附有此類
的說明文件。另一個方式，就是自己到程式碼中，大略瀏覽一遍，有經驗的程式人可以輕易發掘出該系統所
用的命名慣例。

常見的命名方式不脫那幾類，這時候經驗就很重要，倘若你知道的慣例越多，就越能輕易識別他人所用的慣
例。如果運氣很糟，程式碼所用的慣例是前所未見的，那麼你也得花點時間歸納，憑自己的力量找出這程式
碼命名上的規則。

掌握程式碼撰寫者的心態與習慣
大多數的程式碼，基本上都依循一致的命名慣例。不過運氣更差的時候，一套系統中可能會充斥著多套命名
慣例。這有可能是因為開發團隊由多組人馬所構成，每組人馬都有不同的文化，而在專案開發管理又沒有管
控得宜所造成。最糟的情況，程式碼完全沒有明顯的慣例可言，這時候閱讀的難度就更高了。

想要閱讀程式碼，得先試著體會程式碼作者的「心」。想要這麼做，就得多了解對方所使用的語言，以及慣
常運用的語彙。在下一回中，我們將繼續探討閱讀程式碼的相關議題。

作者簡介：
王建興
清華大學資訊工程系的博士研究生，研究興趣包括電腦網路、點對點網路、分散式網路管理、以及行動式代
理人，專長則是Internet應用系統的開發。曾參與過的開發專案性質十分廣泛而且不同，從ERP、PC
Game到P2P網路電話都在他的涉獵範圍之內。

相關連結
閱讀他人的程式碼(6)閱讀的樂趣：透過程式碼認識作者
閱讀他人的程式碼(5)找到程式入口，再由上而下抽絲剝繭
閱讀他人的程式碼(4)望文生義，進而推敲組件的作用
閱讀他人的程式碼(3)優質工具在手，讀懂程式非難事
閱讀他人的程式碼(2)摸清架構，便可輕鬆掌握全貌

