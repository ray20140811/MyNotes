* rails

** Ruby on Rails自習手冊

*** 5-2 Active Record

| 物件導向         | 關聯式資料庫 |
|------------------+--------------|
| 類別 (class)     | 表 (table)   |
| 物件 (object)    | 列 (row)     |
| 屬性 (attribute) | 欄 (column)  |

**** 5-2-1 命名慣例

| 物件導向   | 關聯式資料庫                          |
|------------+---------------------------------------|
| 資料表     | 複數單字、蛇形命名法，例如 book_clubs |
| Model 類別 | 單數單字、駱駝命名法，例如 BookClub   |

| 類別     | 資料表     |
|----------+------------|
| Post     | posts      |
| LineItem | line_items |
| Deer     | deers      |
| Mouse    | mice       |
| Person   | people     |


**** 5-2-2 rails dbconsole
#+begin_src bash
$ bin/rails dbconsole
#+end_src

#+begin_src SQL
CREATE TABLE posts(
  id INTEGER PRIMARY KEY,
  title TEXT,
  content TEXT
);
#+end_src

#+begin_src ruby
# app/models/post.rb
class Post < ActiveRecord::Base
end
#+end_src


**** 5-2-3 rails console

#+begin_src bash
$ bin/rails console
Loading development environment (Rails 7.0.4)
3.1.2 :001 > Post.create title: 'hello', content: 'world'
=> #<Post id: 1, title: "hello", content: "world">
#+end_src

#+begin_src bash
$ bin/rails dbconsole
sqlite> select * from posts;
1|hello|world
#+end_src

#+begin_src bash
$ bin/rails console
Loading development environment (Rails 7.0.4)
3.1.2 :001 > Post.count
 => 1
3.1.2 :002 > post = Post.find(1)
 => #<Post:0x00007f3c969f5d88 id: 1, title: "hello", content: "world">
3.1.2 :003 > post.title
 => "hello"
3.1.2 :004 > post.content
 => "world"
3.1.2 :005 > post.content = 'rails'
 => "rails"
3.1.2 :006 > post.save
 => true
3.1.2 :007 > Post.all
  Post Load (0.5ms)  SELECT "posts".* FROM "posts"
 =>
[#<Post:0x00007fef9797af48 id: 1, title: "hello", content: "rails">]
#+end_src

| 類別/實體方法 | 說明                   |
|---------------+------------------------|
| ::count       | 回傳資料筆數           |
| ::find        | 用主鍵找，回傳Post物件 |
| ::all         | 回傳Post物件陣列       |
| #save         | 將物件回寫到資料表     |
| #destroy      | 刪除資料               |


**** 5-2-4 CRUD操作
+ Create - 新增
#+begin_src bash
# 使用 #create
post = Post.create title: 'hello', content: 'world'

# 使用 #new 與 #save
post = Post.new # 僅創造物件,不會寫入資料庫
post.title = 'hello'
post.content = 'world'
post.save # 將物件回寫到資料庫
#+end_src

+ Read - 檢索
#+begin_src bash
posts = Post.all    # 取得所有文章
post = Post.first   # 取得第一篇文章
post = Post.find(1) # 取得主鍵為1的文章

# 尋找標題是 hello 的文章
post = Post.find_by(title: 'hello')

# 尋找所有標題是 hello 的文章，並按照新增 id 降冪排序
posts = Post.where(name: 'hello').order('id DESC')
#+end_src

+ Update - 更新
#+begin_src bash
# 使用 #save
post = Post.find(1)
post.title = 'new title'
post.save # 回寫到資料庫

# 使用 #update
post = Post.find_by(title: 'new title')
post.update(title: 'new new title')

# 更新所有資料
Post.update_all genre: 'life'

# 局部更新所有資料，例如把所有分類為 rails 的文章改為 ruby on rails
Post.where(genre: 'rails').update_all(genre: 'ruby on rails')
#+end_src

+ 刪除
#+begin_src bash
# 刪除單筆資料
post = Post.find_by(title: 'new new title')
post.destroy

# 刪除所有資料
Post.destroy_all
#+end_src


**** 5-2-5 設定資料庫

  Rails預設的資料庫使用SQLite,若要換到別的資料庫,可以在Config/database.yml
做設定。

#+begin_src
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  <<: *default
  database: db/development.sqlite3

test:
  <<: *default
  database: db/test.sqlite3

production:
  <<: *default
  database: db/production.sqlite3
#+end_src

可用的設定:

| 設定     | 功能                                         |
|----------+----------------------------------------------|
| adapter  | adapter gem,例如mysql2,sqllite3,postgresql等 |
| host     | 主機                                         |
| database | 資料庫名稱                                   |
| encoding | 資料庫編碼                                   |
| timeout  | 連線逾時                                     |
| pool     | 連線數                                       |
| username | 登入帳號                                     |
| password | 登入密碼                                     |

資料庫連線的是由adapter gem 提供統一的介面.對一個rails網站抽換別種資料庫時,
只要修改config/database.yml adapter部份即可.

#+begin_src bash
rails s -e production
#+end_src

或者使用RAILS_ENV環境變數:
#+begin_src bash
RAILS_ENV=production rails s
#+end_src

以下是一個MySQL設定的範例:
#+begin_src
development:
  adapter: mysql
  encoding: utf8
  database: blog_development
  pool: 5
  username: root
  password:
  socket: /tmp/mysql.sock
#+end_src


*** 5-3 資料庫遷移

**** 5-3-1 新增遷移檔

#+begin_src
$ rails g migration modify_posts
      invoke   active_record
      create      db/migrate/20141209134930_modify_posts.rb
#+end_src

編輯剛剛產生的檔案,新增一個整數欄位view_count到posts表:

#+begin_src ruby
# db/migrate/20141209134930_modify_posts.rb
class ModifyPosts < ActiveRecord::Migration
  def change
    add_column :posts, :view_count, :integer
  end
end
#+end_src

#+begin_src
$ bin/rake db:migrate
== TIMESTAMP ModifyPosts: migrating =======================
-- add_column(:posts, :view_count, :integer)
  -> 0.0031s
== TIMESTAMP ModifyPosts: migrated (0.0032s) ==============
#+end_src

#+begin_src
$bin/rails dbconsole
SQLite version 3.37.2 2022-01-06 13:25:41
Enter ".help" for usage hints.
sqlite> .schema posts
CREATE TABLE IF NOT EXISTS "posts"
 ("id" integer NOT NULL PRIMARY KEY,
 "title" text DEFAULT NULL,
 "content" text DEFAULT NULL,
 "view_count" integer);
#+end_src

#+begin_src
sqlite> .tables
posts                 schema_migrations
sqlite> .schema schema_migrations
CREATE TABLE IF NOT EXISTS "schema_migrations"
   ("version" varchar NOT NULL PRIMARY KEY);
sqlite> SELECT * FROM schema_migrations;
20220914161418
#+end_src

#+begin_src
$ bin/rake db:migrate:status

database: db/development.sqlite3

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20220914161418  Modify posts
#+end_src

其中up表示該遷移檔已經執行過,下一次的bin/rake db:migrate並不會執行這個遷移。

我們再新增一個遷移檔,將view_count改為views:

#+begin_src
$ bin/rails g migration rename_view_count_in_posts
  invoke   active_record
  create     db/migrate/20220914162607_rename_view_count_in_posts.rb
#+end_src

用rename_column重命名:

#+begin_src ruby
# db/migrate/20220914162607_rename_view_count_in_posts.rb
class RenameViewCountInPosts < Activerecord::Migration
  def change
    rename_column :posts, :view_count, :views
  end
end
#+end_src

再遷移前,再看一次遷移進度中多了一個down的項目,表示目前有尚未執行的遷移檔:

#+begin_src
$ bin/rake db:migrate:status

database: db/development.sqlite3

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20220914161418  Modify posts
 down     20220914162312  Add view count in posts
#+end_src

再遷移一次

#+begin_src
$ bin/rake db:migrate
== TIMESTAMP RenameViewCountInPosts: migrating =======================
-- rename_column(:posts, :view_count, :views)
  -> 0.0106s
== TIMESTAMP Renameviewcountinposts: migrated (0.0107s) ==============
#+end_src

狀態顯示已經沒有任何的擱置的遷移檔:

#+begin_src
$ bin/rake db:migrate:status

database: db/development.sqlite3

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20220914161418  Modify posts
   up     20220914162312  Add view count in posts
   up     20220914162607  Rename view count in posts
#+end_src


**** 5-3-2 版本回滾

若發現遷移的schema不如預期,可以用bin/rake db:rollback回滾到最後一個遷移檔。
以此例可以從輸出訊息看到原本的view又被改回了view_count:

#+begin_src
$ bin/rake db:rollback
== TIMESTAMP RenameViewCountInPosts: reverting =======================
-- rename_column(:posts, :view_count, :views)
  -> 0.0117s
== TIMESTAMP Renameviewcountinposts: reverted (0.0146s) ==============
#+end_src

可以加上STEP環境變數來控制回滾幾個版本,例如:

#+begin_src
$ STEP=3 bin/rake db:rollback
#+end_src


**** 5-3-3 遷移指令

| 指令                                     | 說明                                |
|------------------------------------------+-------------------------------------|
| add_column(table, column, type)          | 新增欄                              |
| add_index(table, column)                 | 新增索引,會以table_column_index命名 |
| add_timestamps(table)                    | 新增created_at和updated_at欄        |
| change_column(table, column, type)       | 修改欄                              |
| create_table(table)                      | 新增表                              |
| drop_table(table)                        | 刪除表                              |
| remove_column(table, column)             | 刪除欄                              |
| remove_index(table, column)              | 刪除索引                            |
| remove_timestamps(table)                 | 刪除created_at與updated_at欄        |
| rename_column(table, old_name, new_name) | 重新命名欄                          |
| rename_index(table, old_name, new_name)  | 重新命名索引                        |
| rename_table(table, new_name)            | 重新命名表                          |

#+begin_src
# 使該欄位在資料庫不可是NULL,且預設為0
add_column :posts, :views, :integer, null: false, default:0
#+end_src


**** 5-3-4 change,up與down

上述提到資料庫遷移的管理方式,是藉由多個有序遷移檔的變更與回滾兩個部份的程式碼來控制schema版本。
而rails遷移檔的使用,則是將這兩部份的程式碼分別寫在#up和#down兩個方法中。事實上,在posts表
新增view_count欄位的遷移檔可以改寫如下:

#+begin_src ruby
# db/migrate/20141209134930_modify_posts.rb
class ModifyPosts < ActiveRecord::Migration
  # def change
  #  add_column :posts, :view_count, :integer
  # end

  # 等同於以下寫法
  def up
    add_column :posts, :view_count, :integer
  end

  def down
    remove_column :posts, :view_count
  end
end
#+end_src

這也是rails早期版本的寫法,#change是rails後期加入的新功能。有些回滾是可以透過變更的內容去推測出來的。

可被rails自動回滾的指令包括: add_column, add_index, add_timestamps, create_table, create_join_table,
remove_timestamps, rename_column, rename_index, rename_table。


**** 5-3-5 Model產生器

#+begin_src
$ bin/rails generate model NAME [field[:type] [:index] ...]
#+end_src

| 參數  | 說明                                  |
|-------+---------------------------------------|
| NAME  | model名稱,單數型態;蛇形或駱駝命行皆可 |
| field | 資料表的欄位名稱                      |
| type  | 資料型態,預設是string                 |
| index | 該欄位是否建立索引                    |

支援的資料型態:

| 資料型態    | 說明                                       |
|-------------+--------------------------------------------|
| primary_key | 主鍵                                       |
| string      | 短字串(255)                                |
| text        | 長字串                                     |
| integer     | 整數                                       |
| float       | 浮點數                                     |
| decimal     | 高精浮點數                                 |
| datetime    | 時間日期(字串)                             |
| timestamp   | UNIX時間(數字)                             |
| time        | 時間                                       |
| date        | 日期                                       |
| binary      | 二進位資料                                 |
| boolean     | 布林值                                     |
| json        | JSON字串,PostgreSQL專有                    |
| hstore      | 類似Ruby的Hash,只能使用一層;Postgresql專有 |

#+begin_src
$ bin/rails g model user name email about:text
    invoke  active_record
    create      db/migrate/20141211091418_create_users.rb
    create      app/models/user.rb
#+end_src

產生遷移檔並不會改變資料庫,需要再遷移一次:

#+begin_src
$ bin/rake db:migrate
== TIMESTAMP CreateUsers: migrating =======================
-- create_table(:users)
  -> 0.0035s
== TIMESTAMP CreateUsers: migrated (0.0035s) ==============
#+end_src

接著進入rails console,除了Post之外,已有User可使用:

#+begin_src ruby
User.count # => 0
user = User.create name: 'tony', email: 'tony@5xruby.tw', about: '嘉義人'
user.id    # => 1
User.count # => 1
user.name  # => "tony"
#+end_src
